// Copyright (c) Microsoft Corporation 2005-2006.
// This sample code is provided "as is" without warranty of any kind.
// We disclaim all warranties, either express or implied, including the
// warranties of merchantability and fitness for a particular purpose.
//

// This file is a sample lexer specification for use with F# Lex (fslex.exe).
//
// You must currently compile this file using the command line tool fslex.exe

//--------------------------------------------------------------
// Part I. Supporting F# definitions. Everything between braces
// is F# code added to the generated file.

{

module Lex

open System
open Pars
open Lexing

// Fslex generated parsers follow the same pattern as OCamllex
// and Mossmllex generated parsers, and do not update line number
// information automatically, partly because the knowledge of when
// a newline has occured is best placed in the lexer rules.
// Thus the following boiler-plate code is very useful:

let record_newline (lexbuf : lexbuf) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

}

//--------------------------------------------------------------
// Part II. Define some regular expressions
//
// These are some regular expression definitions

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

//--------------------------------------------------------------
// Part III. Token generators and rules.
//
// These are the rules specifying the tokens matched by the lexer
//
// This lexer has only one generator ('token')
//
// Generator definitions can take arguments, e.g.
//
//   rule token arg1 arg2 = parse ...


rule token = parse
| whitespace { token lexbuf }                          // keep lexing!
| newline    { record_newline lexbuf; token lexbuf }   // record line number and keep lexing!
| "while"    { WHILE }                                 // return a token!
| "begin"    { BEGIN }                                 // ...
| "end"      { END }
| "do"       { DO }
| "if"       { IF }
| "then"    { THEN }
| "else"    { ELSE }
| "print"   { PRINT }
| "decr"    { DECR }
| "("       { LPAREN }
| ")"       { RPAREN }
| ";"       { SEMI }
| ":="      { ASSIGN }                                // ...
| ['a'-'z']+
            { ID(lexeme lexbuf) }                     // return a token carrying data!
| ['-']?digit+
            { INT (int32 (lexeme lexbuf)) }      // return a token carrying data!
| ['-']?digit+('.'digit+)?(['e''E']digit+)?
            { FLOAT (float (lexeme lexbuf)) }
| eof   { EOF }                                           // return a token for the EOF

//
// Additional generator definitions would go here, e.g.
//
//   and comment arg1 arg2 = parse ...
//
//   and string arg1 arg2 = parse ...
