// Implementation file for parser generated by fsyacc
module Pars
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 10 "pars.fsy"


// This prelude is F# code that is available throughout this file. In this
// case we just open a module to reveal some datatype definitions.
open Ast


# 13 "pars.fs"
// This type is the type of tokens accepted by the parser
type token =
  | DECR
  | LPAREN
  | RPAREN
  | WHILE
  | DO
  | END
  | BEGIN
  | IF
  | THEN
  | ELSE
  | PRINT
  | SEMI
  | ASSIGN
  | EOF
  | FLOAT of (System.Double)
  | INT of (System.Int32)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId =
    | TOKEN_DECR
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_END
    | TOKEN_BEGIN
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_PRINT
    | TOKEN_SEMI
    | TOKEN_ASSIGN
    | TOKEN_EOF
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId =
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Expr
    | NONTERM_Stmt
    | NONTERM_StmtList

// This function maps tokens to integers indexes
let tagOfToken (t:token) =
  match t with
  | DECR  -> 0
  | LPAREN  -> 1
  | RPAREN  -> 2
  | WHILE  -> 3
  | DO  -> 4
  | END  -> 5
  | BEGIN  -> 6
  | IF  -> 7
  | THEN  -> 8
  | ELSE  -> 9
  | PRINT  -> 10
  | SEMI  -> 11
  | ASSIGN  -> 12
  | EOF  -> 13
  | FLOAT _ -> 14
  | INT _ -> 15
  | ID _ -> 16

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) =
  match tokenIdx with
  | 0 -> TOKEN_DECR
  | 1 -> TOKEN_LPAREN
  | 2 -> TOKEN_RPAREN
  | 3 -> TOKEN_WHILE
  | 4 -> TOKEN_DO
  | 5 -> TOKEN_END
  | 6 -> TOKEN_BEGIN
  | 7 -> TOKEN_IF
  | 8 -> TOKEN_THEN
  | 9 -> TOKEN_ELSE
  | 10 -> TOKEN_PRINT
  | 11 -> TOKEN_SEMI
  | 12 -> TOKEN_ASSIGN
  | 13 -> TOKEN_EOF
  | 14 -> TOKEN_FLOAT
  | 15 -> TOKEN_INT
  | 16 -> TOKEN_ID
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) =
  match prodIdx with
    | 0 -> NONTERM__startstart
    | 1 -> NONTERM_start
    | 2 -> NONTERM_Prog
    | 3 -> NONTERM_Expr
    | 4 -> NONTERM_Expr
    | 5 -> NONTERM_Expr
    | 6 -> NONTERM_Expr
    | 7 -> NONTERM_Stmt
    | 8 -> NONTERM_Stmt
    | 9 -> NONTERM_Stmt
    | 10 -> NONTERM_Stmt
    | 11 -> NONTERM_Stmt
    | 12 -> NONTERM_Stmt
    | 13 -> NONTERM_StmtList
    | 14 -> NONTERM_StmtList
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) =
  match t with
  | DECR  -> "DECR"
  | LPAREN  -> "LPAREN"
  | RPAREN  -> "RPAREN"
  | WHILE  -> "WHILE"
  | DO  -> "DO"
  | END  -> "END"
  | BEGIN  -> "BEGIN"
  | IF  -> "IF"
  | THEN  -> "THEN"
  | ELSE  -> "ELSE"
  | PRINT  -> "PRINT"
  | SEMI  -> "SEMI"
  | ASSIGN  -> "ASSIGN"
  | EOF  -> "EOF"
  | FLOAT _ -> "FLOAT"
  | INT _ -> "INT"
  | ID _ -> "ID"

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) =
  match t with
  | DECR  -> (null : System.Object)
  | LPAREN  -> (null : System.Object)
  | RPAREN  -> (null : System.Object)
  | WHILE  -> (null : System.Object)
  | DO  -> (null : System.Object)
  | END  -> (null : System.Object)
  | BEGIN  -> (null : System.Object)
  | IF  -> (null : System.Object)
  | THEN  -> (null : System.Object)
  | ELSE  -> (null : System.Object)
  | PRINT  -> (null : System.Object)
  | SEMI  -> (null : System.Object)
  | ASSIGN  -> (null : System.Object)
  | EOF  -> (null : System.Object)
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 5us; 65535us; 8us; 9us; 12us; 13us; 14us; 15us; 21us; 22us; 27us; 28us; 6us; 65535us; 0us; 29us; 16us; 17us; 18us; 29us; 23us; 24us; 25us; 26us; 30us; 31us; 2us; 65535us; 0us; 3us; 18us; 19us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 11us; 18us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 14us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 2us; 9us; 14us; 1us; 9us; 2us; 10us; 11us; 2us; 10us; 11us; 2us; 10us; 11us; 2us; 10us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 42us; 44us; 47us; 50us; 53us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; |]
let _fsyacc_action_rows = 32
let _fsyacc_actionTableElements = [|5us; 32768us; 3us; 14us; 6us; 18us; 7us; 21us; 10us; 27us; 16us; 11us; 0us; 49152us; 0us; 16385us; 1us; 16386us; 11us; 30us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 1us; 32768us; 1us; 8us; 4us; 32768us; 0us; 7us; 14us; 6us; 15us; 5us; 16us; 4us; 1us; 32768us; 2us; 10us; 0us; 16390us; 1us; 32768us; 12us; 12us; 4us; 32768us; 0us; 7us; 14us; 6us; 15us; 5us; 16us; 4us; 0us; 16391us; 4us; 32768us; 0us; 7us; 14us; 6us; 15us; 5us; 16us; 4us; 1us; 32768us; 4us; 16us; 5us; 32768us; 3us; 14us; 6us; 18us; 7us; 21us; 10us; 27us; 16us; 11us; 0us; 16392us; 5us; 32768us; 3us; 14us; 6us; 18us; 7us; 21us; 10us; 27us; 16us; 11us; 2us; 32768us; 5us; 20us; 11us; 30us; 0us; 16393us; 4us; 32768us; 0us; 7us; 14us; 6us; 15us; 5us; 16us; 4us; 1us; 32768us; 8us; 23us; 5us; 32768us; 3us; 14us; 6us; 18us; 7us; 21us; 10us; 27us; 16us; 11us; 1us; 16394us; 9us; 25us; 5us; 32768us; 3us; 14us; 6us; 18us; 7us; 21us; 10us; 27us; 16us; 11us; 0us; 16395us; 4us; 32768us; 0us; 7us; 14us; 6us; 15us; 5us; 16us; 4us; 0us; 16396us; 0us; 16397us; 5us; 32768us; 3us; 14us; 6us; 18us; 7us; 21us; 10us; 27us; 16us; 11us; 0us; 16398us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 8us; 10us; 11us; 12us; 13us; 15us; 20us; 22us; 23us; 25us; 30us; 31us; 36us; 38us; 44us; 45us; 51us; 54us; 55us; 60us; 62us; 68us; 70us; 76us; 77us; 82us; 83us; 84us; 90us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 4us; 3us; 4us; 3us; 4us; 6us; 2us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 16397us; 65535us; 16398us; |]
let _fsyacc_reductions ()  =    [|
# 183 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Ast.prog )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 192 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "pars.fsy"
                       _1
                   )
# 37 "pars.fsy"
                 :  Ast.prog ));
# 203 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "pars.fsy"
                      Prog(List.rev(_1))
                   )
# 40 "pars.fsy"
                 : 'Prog));
# 214 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "pars.fsy"
                      Val(_1);
                   )
# 42 "pars.fsy"
                 : 'Expr));
# 225 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "pars.fsy"
                      Int(_1)
                   )
# 43 "pars.fsy"
                 : 'Expr));
# 236 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "pars.fsy"
                      Float(_1)
                   )
# 44 "pars.fsy"
                 : 'Expr));
# 247 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "pars.fsy"
                      Decr(_3)
                   )
# 45 "pars.fsy"
                 : 'Expr));
# 258 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "pars.fsy"
                      Assign(_1,_3)
                   )
# 47 "pars.fsy"
                 : 'Stmt));
# 270 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "pars.fsy"
                      While(_2,_4)
                   )
# 48 "pars.fsy"
                 : 'Stmt));
# 282 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "pars.fsy"
                      Seq(List.rev(_2))
                   )
# 49 "pars.fsy"
                 : 'Stmt));
# 293 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "pars.fsy"
                      IfThen(_2,_4)
                   )
# 50 "pars.fsy"
                 : 'Stmt));
# 305 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "pars.fsy"
                      IfThenElse(_2,_4,_6)
                   )
# 51 "pars.fsy"
                 : 'Stmt));
# 318 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "pars.fsy"
                      Print(_2)
                   )
# 52 "pars.fsy"
                 : 'Stmt));
# 329 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "pars.fsy"
                      [_1]
                   )
# 55 "pars.fsy"
                 : 'StmtList));
# 340 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "pars.fsy"
                      _3 :: _1
                   )
# 56 "pars.fsy"
                 : 'StmtList));
|]
# 353 "pars.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> =
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken;
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) ->
                              match parse_error_rich with
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Ast.prog  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
