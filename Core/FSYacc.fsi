// Signature file for parser generated by fsyacc
#light
type token = 
  | LeftParen
  | RightParen
  | Eof
  | Digits of (int)
  | Text of (string)
  | Identifier of (string)
type tokenId = 
    | TOKEN_LeftParen
    | TOKEN_RightParen
    | TOKEN_Eof
    | TOKEN_Digits
    | TOKEN_Text
    | TOKEN_Identifier
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_Expr
    | NONTERM_ExprList
    | NONTERM_parse
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val parse : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Tim.Lisp.Core.LispVal list) 
